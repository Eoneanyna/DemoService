// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"demoserveice/internal/biz"
	"demoserveice/internal/conf"
	"demoserveice/internal/data"
	"demoserveice/internal/server"
	"demoserveice/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	_ "net/http"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	redisData, cleanup, err := data.NewRedis(confData)
	 if err != nil {return nil, nil, err}

	newsRepo := data.NewNewsRepo(dataData,redisData,logger)
	newsUsecase := biz.NewNewsUsecase(newsRepo, logger)
	newsService := service.NewNewsService(newsUsecase, logger)
	httpServer := server.NewHTTPServer(confServer)
	dataStreamService := service.NewDataStreamService()

	grpcServer := server.NewGRPCServer(confServer,newsService, dataStreamService)
	app := newApp(logger, httpServer, grpcServer, confServer)
	return app, func() {
		cleanup()
	}, nil
}
