// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: api/news/v1/news.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 根据ID获取新闻详情请求
type GetNewsByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewsByIdRequest) Reset() {
	*x = GetNewsByIdRequest{}
	mi := &file_api_news_v1_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewsByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsByIdRequest) ProtoMessage() {}

func (x *GetNewsByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_news_v1_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsByIdRequest.ProtoReflect.Descriptor instead.
func (*GetNewsByIdRequest) Descriptor() ([]byte, []int) {
	return file_api_news_v1_news_proto_rawDescGZIP(), []int{0}
}

func (x *GetNewsByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据ID获取新闻详情响应
type GetNewsByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	News          *News                  `protobuf:"bytes,1,opt,name=news,proto3" json:"news,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewsByIdResponse) Reset() {
	*x = GetNewsByIdResponse{}
	mi := &file_api_news_v1_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewsByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsByIdResponse) ProtoMessage() {}

func (x *GetNewsByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_news_v1_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsByIdResponse.ProtoReflect.Descriptor instead.
func (*GetNewsByIdResponse) Descriptor() ([]byte, []int) {
	return file_api_news_v1_news_proto_rawDescGZIP(), []int{1}
}

func (x *GetNewsByIdResponse) GetNews() *News {
	if x != nil {
		return x.News
	}
	return nil
}

// 新闻信息
type News struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         int32                  `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ViewCount     int32                  `protobuf:"varint,4,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	CreateTime    int32                  `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *News) Reset() {
	*x = News{}
	mi := &file_api_news_v1_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_api_news_v1_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_api_news_v1_news_proto_rawDescGZIP(), []int{2}
}

func (x *News) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *News) GetTitle() int32 {
	if x != nil {
		return x.Title
	}
	return 0
}

func (x *News) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *News) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *News) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_api_news_v1_news_proto protoreflect.FileDescriptor

const file_api_news_v1_news_proto_rawDesc = "" +
	"\n" +
	"\x16api/news/v1/news.proto\x12\x18demoserveice.api.news.v1\x1a\x1cgoogle/api/annotations.proto\"$\n" +
	"\x12GetNewsByIdRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"I\n" +
	"\x13GetNewsByIdResponse\x122\n" +
	"\x04news\x18\x01 \x01(\v2\x1e.demoserveice.api.news.v1.NewsR\x04news\"\x86\x01\n" +
	"\x04News\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\x05R\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x1d\n" +
	"\n" +
	"view_count\x18\x04 \x01(\x05R\tviewCount\x12\x1f\n" +
	"\vcreate_time\x18\x05 \x01(\x05R\n" +
	"createTime2\x91\x01\n" +
	"\vNewsService\x12\x81\x01\n" +
	"\vGetNewsById\x12,.demoserveice.api.news.v1.GetNewsByIdRequest\x1a-.demoserveice.api.news.v1.GetNewsByIdResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/v1/news/{id}B\x1fP\x01Z\x1bdemoserveice/api/news/v1;v1b\x06proto3"

var (
	file_api_news_v1_news_proto_rawDescOnce sync.Once
	file_api_news_v1_news_proto_rawDescData []byte
)

func file_api_news_v1_news_proto_rawDescGZIP() []byte {
	file_api_news_v1_news_proto_rawDescOnce.Do(func() {
		file_api_news_v1_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_news_v1_news_proto_rawDesc), len(file_api_news_v1_news_proto_rawDesc)))
	})
	return file_api_news_v1_news_proto_rawDescData
}

var file_api_news_v1_news_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_news_v1_news_proto_goTypes = []any{
	(*GetNewsByIdRequest)(nil),  // 0: demoserveice.api.news.v1.GetNewsByIdRequest
	(*GetNewsByIdResponse)(nil), // 1: demoserveice.api.news.v1.GetNewsByIdResponse
	(*News)(nil),                // 2: demoserveice.api.news.v1.News
}
var file_api_news_v1_news_proto_depIdxs = []int32{
	2, // 0: demoserveice.api.news.v1.GetNewsByIdResponse.news:type_name -> demoserveice.api.news.v1.News
	0, // 1: demoserveice.api.news.v1.NewsService.GetNewsById:input_type -> demoserveice.api.news.v1.GetNewsByIdRequest
	1, // 2: demoserveice.api.news.v1.NewsService.GetNewsById:output_type -> demoserveice.api.news.v1.GetNewsByIdResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_news_v1_news_proto_init() }
func file_api_news_v1_news_proto_init() {
	if File_api_news_v1_news_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_news_v1_news_proto_rawDesc), len(file_api_news_v1_news_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_news_v1_news_proto_goTypes,
		DependencyIndexes: file_api_news_v1_news_proto_depIdxs,
		MessageInfos:      file_api_news_v1_news_proto_msgTypes,
	}.Build()
	File_api_news_v1_news_proto = out.File
	file_api_news_v1_news_proto_goTypes = nil
	file_api_news_v1_news_proto_depIdxs = nil
}
